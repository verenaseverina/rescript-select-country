// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as FlagIcon from "./FlagIcon.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Js_promise2 from "rescript/lib/es6/js_promise2.js";
import * as ReactSelect from "./ReactSelect.js";
import ReactSelect$1 from "react-select";
import CountrySelectModuleCss from "./CountrySelect.module.css";

var countrySelectStyle = CountrySelectModuleCss;

var controlStyle = {
  paddingLeft: "1rem"
};

var menuStyle = {
  boxShadow: "inset 0 1px 0 rgba(0, 0, 0, 0.1)"
};

function selectStyles_control(props) {
  return Object.assign({}, props, controlStyle);
}

function selectStyles_menu(param) {
  return menuStyle;
}

var selectStyles = {
  control: selectStyles_control,
  menu: selectStyles_menu
};

function CountrySelect$Svg(props) {
  return React.createElement("svg", {
              className: props.className,
              role: "presentation",
              height: "24",
              width: "24",
              focusable: "false",
              viewBox: "0 0 24 24"
            }, props.children);
}

var Svg = {
  make: CountrySelect$Svg
};

function CountrySelect$DropdownIndicator(props) {
  return React.createElement("div", {
              className: countrySelectStyle.dropdownIndicator
            }, React.createElement(CountrySelect$Svg, {
                  children: React.createElement("path", {
                        d: "M16.436 15.085l3.94 4.01a1 1 0 0 1-1.425 1.402l-3.938-4.006a7.5 7.5 0 1 1 1.423-1.406zM10.5 16a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11z",
                        fill: "currentcolor",
                        fillRule: "evenodd"
                      })
                }));
}

var DropdownIndicator = {
  make: CountrySelect$DropdownIndicator
};

function CountrySelect$ChevronDown(props) {
  return React.createElement(CountrySelect$Svg, {
              className: countrySelectStyle.chevronRight,
              children: React.createElement("path", {
                    d: "M8.292 10.293a1.009 1.009 0 0 0 0 1.419l2.939 2.965c.218.215.5.322.779.322s.556-.107.769-.322l2.93-2.955a1.01 1.01 0 0 0 0-1.419.987.987 0 0 0-1.406 0l-2.298 2.317-2.307-2.327a.99.99 0 0 0-1.406 0z",
                    fill: "currentColor",
                    fillRule: "evenodd"
                  })
            });
}

var ChevronDown = {
  make: CountrySelect$ChevronDown
};

function CountrySelect$Menu(props) {
  return React.createElement("div", {
              className: countrySelectStyle.menu
            }, props.children);
}

var Menu = {
  make: CountrySelect$Menu
};

function CountrySelect$Blanket(props) {
  return React.createElement("div", {
              className: countrySelectStyle.blanket,
              onClick: props.onClick
            });
}

var Blanket = {
  make: CountrySelect$Blanket
};

function CountrySelect$Dropdown(props) {
  var isOpen = props.isOpen;
  var menuComponent = isOpen ? React.createElement(CountrySelect$Menu, {
          children: props.children
        }) : React.createElement(React.Fragment, undefined);
  var blanketComponent = isOpen ? React.createElement(CountrySelect$Blanket, {
          onClick: props.onClose
        }) : React.createElement(React.Fragment, undefined);
  return React.createElement("div", {
              className: countrySelectStyle.dropdownContainer
            }, props.target, menuComponent, blanketComponent);
}

var Dropdown = {
  make: CountrySelect$Dropdown
};

function make(props) {
  return React.createElement("div", props);
}

var EmptyComponent = {
  make: make
};

function make$1(props) {
  var children = Caml_option.some(React.createElement(React.Fragment, undefined, React.createElement(FlagIcon.make, {
                country: props.value
              }), props.label));
  var newrecord = Caml_obj.obj_dup(props);
  return React.createElement(ReactSelect.ReactSelectOption.make, (newrecord.children = Caml_option.some(children), newrecord));
}

var CustomOption = {
  make: make$1
};

function make$2(props) {
  return React.createElement(ReactSelect.ReactSelectControl.make, {
              children: null,
              cx: props.cx,
              getClassNames: props.getClassNames,
              getStyles: props.getStyles,
              theme: props.theme
            }, React.createElement(CountrySelect$DropdownIndicator, {}), props.children);
}

var CustomControl = {
  make: make$2
};

function getValueFromOption(keyword, options) {
  var idx = 0;
  var $$break = false;
  var key = keyword !== undefined ? keyword : "";
  while(!$$break && idx < options.length && key !== "") {
    var currentOption = Belt_Array.get(options, idx);
    var isFound = currentOption !== undefined ? Caml_option.valFromOption(currentOption).value === key : false;
    if (isFound) {
      $$break = true;
    } else {
      idx = idx + 1 | 0;
    }
  };
  if ($$break) {
    return Belt_Array.get(options, idx);
  }
  
}

function CountrySelect(props) {
  var onChange = props.onChange;
  var country = props.country;
  var match = React.useState(function () {
        return false;
      });
  var setIsOpen = match[1];
  var match$1 = React.useState(function () {
        return [];
      });
  var setOptions = match$1[1];
  var options = match$1[0];
  var value = getValueFromOption(country, options);
  var name = value !== undefined ? Caml_option.valFromOption(value).label : "";
  var placeholder = country !== undefined ? name : "Search...";
  React.useEffect((function () {
          Js_promise2.then(fetch("https://gist.githubusercontent.com/rusty-key/659db3f4566df459bd59c8a53dc9f71f/raw/4127f9550ef063121c564025f6d27dceeb279623/counties.json"), (function (val) {
                  return Js_promise2.then(val.json(), (function (val) {
                                Curry._1(setOptions, (function (param) {
                                        return val;
                                      }));
                                return Promise.resolve(undefined);
                              }));
                }));
        }), [setOptions]);
  return React.createElement(CountrySelect$Dropdown, {
              children: React.createElement(ReactSelect$1, {
                    autoFocus: true,
                    backspaceRemovesValue: false,
                    className: props.className,
                    controlShouldRenderValue: false,
                    components: {
                      Control: make$2,
                      DropdownIndicator: make,
                      IndicatorSeparator: make,
                      Option: make$1
                    },
                    hideSelectedOptions: false,
                    isClearable: false,
                    menuIsOpen: true,
                    onChange: (function (val) {
                        Curry._1(onChange, val.value);
                        Curry._1(setIsOpen, (function (param) {
                                return false;
                              }));
                      }),
                    options: options,
                    placeholder: placeholder,
                    styles: selectStyles,
                    tabSelectsValue: false,
                    value: Caml_option.some(value)
                  }),
              isOpen: match[0],
              target: React.createElement("button", {
                    onClick: (function (param) {
                        Curry._1(setIsOpen, (function (prev) {
                                return !prev;
                              }));
                      })
                  }, name, React.createElement(CountrySelect$ChevronDown, {})),
              onClose: (function (param) {
                  Curry._1(setIsOpen, (function (param) {
                          return false;
                        }));
                })
            });
}

var nullValue = null;

var make$3 = CountrySelect;

export {
  countrySelectStyle ,
  controlStyle ,
  menuStyle ,
  selectStyles ,
  Svg ,
  DropdownIndicator ,
  ChevronDown ,
  Menu ,
  Blanket ,
  Dropdown ,
  EmptyComponent ,
  CustomOption ,
  CustomControl ,
  getValueFromOption ,
  nullValue ,
  make$3 as make,
}
/* countrySelectStyle Not a pure module */
